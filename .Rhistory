library(readxl)
J <- read_excel("/Users/alinaklineschoder/Downloads/JH-CP_SampleKey_202506.xlsx")
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")
colnames(J)
library(readxl)
J <- read_excel("/Users/alinaklineschoder/Downloads/JH-CP_SampleKey_202506.xlsx")
J <- read_excel("/Users/alinaklineschoder/Downloads/JH-CP_SampleKey_202506.xlsx",sheet=1)
J<-read.csv("/Users/alinaklineschoder/Desktop/JSamples.csv")
View(J)
colnames(J)
colnames(Scores)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)
library(tidyverse)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)
J<-read.csv("/Users/alinaklineschoder/Desktop/JSamples.csv")
setdiff(J$Sequencing_Sample_ID,Scores$Sequencing_Sample_ID)
intersect(J$Sequencing_Sample_ID,Scores$Sequencing_Sample_ID)
head(Scores$Sequencing_Sample_ID)
View(Scores)
# Initialize an empty list to store results
match_list <- list()
# Loop through each element in J$X
for (i in seq_along(J$Sequencing_Sample_ID)) {
query <- J$Sequencing_Sample_ID[i]
# Find matches in df1$X that contain this query as a substring
matches <- Scores[grepl(query, Scores$Sequencing_Sample_ID), ]
# Store in list with query as name
match_list[[query]] <- matches
}
View(match_list)
# Combine list of dataframes into one, with a new column for the matching query
match_df <- do.call(rbind, lapply(names(match_list), function(key) {
df <- match_list[[key]]
if (nrow(df) > 0) {
df$matched_query <- key  # Add a column for the J$X match
return(df)
} else {
NULL
}
}))
View(match_df)
missing<-setdiff(J$Sequencing_Sample_ID,match_df$matched_query)
missing
View(Scores)
dim(match_df)
92-66
length(unique(J$Sequencing_Sample_ID))
library(tidyverse)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)%>%
mutate(Sequencing_Sample_ID=gsub("AV-1M-RQ-v3-VPV3","AV-1M-RQ-VPV3"))
library(tidyverse)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)%>%
mutate(Sequencing_Sample_ID=gsub("AV-1M-RQ-v3-VPV3","AV-1M-RQ-VPV3",Sequencing_Sample_ID))
J<-read.csv("/Users/alinaklineschoder/Desktop/JSamples.csv")
# Initialize an empty list to store results
match_list <- list()
# Loop through each element in J$X
for (i in seq_along(J$Sequencing_Sample_ID)) {
query <- J$Sequencing_Sample_ID[i]
# Find matches in df1$X that contain this query as a substring
matches <- Scores[grepl(query, Scores$Sequencing_Sample_ID), ]
# Store in list with query as name
match_list[[query]] <- matches
}
# Combine list of dataframes into one, with a new column for the matching query
match_df <- do.call(rbind, lapply(names(match_list), function(key) {
df <- match_list[[key]]
if (nrow(df) > 0) {
df$matched_query <- key  # Add a column for the J$X match
return(df)
} else {
NULL
}
}))
missing<-setdiff(J$Sequencing_Sample_ID,match_df$matched_query)
missing
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)
J$Sequencing_Sample_ID[grepl(J$Sequencing_Sample_ID,"VL00007")]
J$Sequencing_Sample_ID[grepl("VL00007",J$Sequencing_Sample_ID)]
library(tidyverse)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)%>%
mutate(Sequencing_Sample_ID=gsub("AV-1M-RQ-v3-VPV3","AV-1M-RQ-VPV3",Sequencing_Sample_ID))
J<-read.csv("/Users/alinaklineschoder/Desktop/JSamples.csv")%>%
select(Sequencing_Sample_ID)%>%
distinct()
# Initialize an empty list to store results
match_list <- list()
# Loop through each element in J$X
for (i in seq_along(J$Sequencing_Sample_ID)) {
query <- J$Sequencing_Sample_ID[i]
# Find matches in df1$X that contain this query as a substring
matches <- Scores[grepl(query, Scores$Sequencing_Sample_ID), ]
# Store in list with query as name
match_list[[query]] <- matches
}
# Combine list of dataframes into one, with a new column for the matching query
match_df <- do.call(rbind, lapply(names(match_list), function(key) {
df <- match_list[[key]]
if (nrow(df) > 0) {
df$matched_query <- key  # Add a column for the J$X match
return(df)
} else {
NULL
}
}))
missing<-setdiff(J$Sequencing_Sample_ID,match_df$matched_query)
missing
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)
library(tidyverse)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)%>%
mutate(Sequencing_Sample_ID=gsub("VL00007-AV-1M-RQ-VPV3","VL00007-AV-1M-RQ-v3-VPV3",Sequencing_Sample_ID))
J<-read.csv("/Users/alinaklineschoder/Desktop/JSamples.csv")%>%
select(Sequencing_Sample_ID)%>%
distinct()
# Initialize an empty list to store results
match_list <- list()
# Loop through each element in J$X
for (i in seq_along(J$Sequencing_Sample_ID)) {
query <- J$Sequencing_Sample_ID[i]
# Find matches in df1$X that contain this query as a substring
matches <- Scores[grepl(query, Scores$Sequencing_Sample_ID), ]
# Store in list with query as name
match_list[[query]] <- matches
}
# Combine list of dataframes into one, with a new column for the matching query
match_df <- do.call(rbind, lapply(names(match_list), function(key) {
df <- match_list[[key]]
if (nrow(df) > 0) {
df$matched_query <- key  # Add a column for the J$X match
return(df)
} else {
NULL
}
}))
missing<-setdiff(J$Sequencing_Sample_ID,match_df$matched_query)
missing
library(tidyverse)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)%>%
mutate(Sequencing_Sample_ID=gsub("VL00007-AV-1M-RQ-v3-VPV3","CP1-1m-VL00007-AV-1M-RQ-VPV3",Sequencing_Sample_ID))
J<-read.csv("/Users/alinaklineschoder/Desktop/JSamples.csv")%>%
select(Sequencing_Sample_ID)%>%
distinct()
# Initialize an empty list to store results
match_list <- list()
# Loop through each element in J$X
for (i in seq_along(J$Sequencing_Sample_ID)) {
query <- J$Sequencing_Sample_ID[i]
# Find matches in df1$X that contain this query as a substring
matches <- Scores[grepl(query, Scores$Sequencing_Sample_ID), ]
# Store in list with query as name
match_list[[query]] <- matches
}
# Combine list of dataframes into one, with a new column for the matching query
match_df <- do.call(rbind, lapply(names(match_list), function(key) {
df <- match_list[[key]]
if (nrow(df) > 0) {
df$matched_query <- key  # Add a column for the J$X match
return(df)
} else {
NULL
}
}))
missing<-setdiff(J$Sequencing_Sample_ID,match_df$matched_query)
library(tidyverse)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)%>%
#mutate(Sequencing_Sample_ID=gsub("VL00007-AV-1M-RQ-v3-VPV3","VL00007-AV-1M-RQ-v3-VPV3",Sequencing_Sample_ID))
J<-read.csv("/Users/alinaklineschoder/Desktop/JSamples.csv")%>%
select(Sequencing_Sample_ID)%>%
distinct()
library(tidyverse)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)#%>%
#mutate(Sequencing_Sample_ID=gsub("VL00007-AV-1M-RQ-v3-VPV3","VL00007-AV-1M-RQ-v3-VPV3",Sequencing_Sample_ID))
J<-read.csv("/Users/alinaklineschoder/Desktop/JSamples.csv")%>%
select(Sequencing_Sample_ID)%>%
distinct()
# Initialize an empty list to store results
match_list <- list()
# Loop through each element in J$X
for (i in seq_along(J$Sequencing_Sample_ID)) {
query <- J$Sequencing_Sample_ID[i]
# Find matches in df1$X that contain this query as a substring
matches <- Scores[grepl(query, Scores$Sequencing_Sample_ID), ]
# Store in list with query as name
match_list[[query]] <- matches
}
# Combine list of dataframes into one, with a new column for the matching query
match_df <- do.call(rbind, lapply(names(match_list), function(key) {
df <- match_list[[key]]
if (nrow(df) > 0) {
df$matched_query <- key  # Add a column for the J$X match
return(df)
} else {
NULL
}
}))
missing<-setdiff(J$Sequencing_Sample_ID,match_df$matched_query)
missing
library(tidyverse)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)#%>%
mutate(Sequencing_Sample_ID=gsub("CP1-1m-VL00007-AV-1M-RQ-v3-VPV3_S1_L001_R1_001
","CP1-1m-VL00007-AV-1M-RQ-VPV3",Sequencing_Sample_ID))
library(tidyverse)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)%>%
mutate(Sequencing_Sample_ID=gsub("CP1-1m-VL00007-AV-1M-RQ-v3-VPV3_S1_L001_R1_001
","CP1-1m-VL00007-AV-1M-RQ-VPV3",Sequencing_Sample_ID))
J<-read.csv("/Users/alinaklineschoder/Desktop/JSamples.csv")%>%
select(Sequencing_Sample_ID)%>%
distinct()
# Initialize an empty list to store results
match_list <- list()
# Loop through each element in J$X
for (i in seq_along(J$Sequencing_Sample_ID)) {
query <- J$Sequencing_Sample_ID[i]
# Find matches in df1$X that contain this query as a substring
matches <- Scores[grepl(query, Scores$Sequencing_Sample_ID), ]
# Store in list with query as name
match_list[[query]] <- matches
}
# Combine list of dataframes into one, with a new column for the matching query
match_df <- do.call(rbind, lapply(names(match_list), function(key) {
df <- match_list[[key]]
if (nrow(df) > 0) {
df$matched_query <- key  # Add a column for the J$X match
return(df)
} else {
NULL
}
}))
missing<-setdiff(J$Sequencing_Sample_ID,match_df$matched_query)
missing
library(tidyverse)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)%>%
mutate(Sequencing_Sample_ID=gsub("CP1-1m-VL00007-AV-1M-RQ-v3-VPV3_S1_L001_R1_001",
"CP1-1m-VL00007-AV-1M-RQ-VPV3",Sequencing_Sample_ID))
J<-read.csv("/Users/alinaklineschoder/Desktop/JSamples.csv")%>%
select(Sequencing_Sample_ID)%>%
distinct()
# Initialize an empty list to store results
match_list <- list()
# Loop through each element in J$X
for (i in seq_along(J$Sequencing_Sample_ID)) {
query <- J$Sequencing_Sample_ID[i]
# Find matches in df1$X that contain this query as a substring
matches <- Scores[grepl(query, Scores$Sequencing_Sample_ID), ]
# Store in list with query as name
match_list[[query]] <- matches
}
# Combine list of dataframes into one, with a new column for the matching query
match_df <- do.call(rbind, lapply(names(match_list), function(key) {
df <- match_list[[key]]
if (nrow(df) > 0) {
df$matched_query <- key  # Add a column for the J$X match
return(df)
} else {
NULL
}
}))
missing<-setdiff(J$Sequencing_Sample_ID,match_df$matched_query)
missing
View(scores)
View(Scores)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)
library(tidyverse)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)#%>%
#mutate(Sequencing_Sample_ID=gsub("CP1-1m-VL00007-AV-1M-RQ-VPV3",
#                                 "CP1-1m-VL00007-AV-1M-RQ-VPV3",Sequencing_Sample_ID))
J<-read.csv("/Users/alinaklineschoder/Desktop/JSamples.csv")%>%
select(Sequencing_Sample_ID)%>%
distinct()
# Initialize an empty list to store results
match_list <- list()
# Loop through each element in J$X
for (i in seq_along(J$Sequencing_Sample_ID)) {
query <- J$Sequencing_Sample_ID[i]
# Find matches in df1$X that contain this query as a substring
matches <- Scores[grepl(query, Scores$Sequencing_Sample_ID), ]
# Store in list with query as name
match_list[[query]] <- matches
}
# Combine list of dataframes into one, with a new column for the matching query
match_df <- do.call(rbind, lapply(names(match_list), function(key) {
df <- match_list[[key]]
if (nrow(df) > 0) {
df$matched_query <- key  # Add a column for the J$X match
return(df)
} else {
NULL
}
}))
missing<-setdiff(J$Sequencing_Sample_ID,match_df$matched_query)
missing
library(tidyverse)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)%>%
mutate(Sequencing_Sample_ID=gsub("CP1-1m-VL00007-AV-1M-RQ-v3-VPV3_S1_L001_R1_001",
"CP1-1m-VL00007-AV-1M-RQ-VPV3_S1_L001_R1_001",Sequencing_Sample_ID))
J<-read.csv("/Users/alinaklineschoder/Desktop/JSamples.csv")%>%
select(Sequencing_Sample_ID)%>%
distinct()
# Initialize an empty list to store results
match_list <- list()
# Loop through each element in J$X
for (i in seq_along(J$Sequencing_Sample_ID)) {
query <- J$Sequencing_Sample_ID[i]
# Find matches in df1$X that contain this query as a substring
matches <- Scores[grepl(query, Scores$Sequencing_Sample_ID), ]
# Store in list with query as name
match_list[[query]] <- matches
}
# Combine list of dataframes into one, with a new column for the matching query
match_df <- do.call(rbind, lapply(names(match_list), function(key) {
df <- match_list[[key]]
if (nrow(df) > 0) {
df$matched_query <- key  # Add a column for the J$X match
return(df)
} else {
NULL
}
}))
missing<-setdiff(J$Sequencing_Sample_ID,match_df$matched_query)
missing
library(tidyverse)
Scores<-read.csv("/Users/alinaklineschoder/Desktop/Data_AnalyticalValidation_Organized/AllScores.csv")%>%
rename(Sequencing_Sample_ID=X)#%>%
#mutate(Sequencing_Sample_ID=gsub("CP1-1m-VL00007-AV-1M-RQ-v3-VPV3_S1_L001_R1_001",
#"CP1-1m-VL00007-AV-1M-RQ-VPV3_S1_L001_R1_001",Sequencing_Sample_ID))
J<-read.csv("/Users/alinaklineschoder/Desktop/JSamples.csv")%>%
select(Sequencing_Sample_ID)%>%
distinct()
# Initialize an empty list to store results
match_list <- list()
# Loop through each element in J$X
for (i in seq_along(J$Sequencing_Sample_ID)) {
query <- J$Sequencing_Sample_ID[i]
# Find matches in df1$X that contain this query as a substring
matches <- Scores[grepl(query, Scores$Sequencing_Sample_ID), ]
# Store in list with query as name
match_list[[query]] <- matches
}
# Combine list of dataframes into one, with a new column for the matching query
match_df <- do.call(rbind, lapply(names(match_list), function(key) {
df <- match_list[[key]]
if (nrow(df) > 0) {
df$matched_query <- key  # Add a column for the J$X match
return(df)
} else {
NULL
}
}))
missing<-setdiff(J$Sequencing_Sample_ID,match_df$matched_query)
missing
View(match_df)
View(Scores)
write.csv(match_df,"/Users/alinaklineschoder/Desktop/ScoreMatching_Output.csv")
colnames)match_df
colnames(match_df)
match_df<-match_df%>%
select(-c(Sequencing_Sample_ID))%>%
rename(Sequencing_Sample_ID=matched_query)
View(match_df)
match_df<-match_df%>%
select(-c(Sequencing_Sample_ID))%>%
rename(Sequencing_Sample_ID=matched_query)%>%
select(-c(X.1))
# Initialize an empty list to store results
match_list <- list()
# Loop through each element in J$X
for (i in seq_along(J$Sequencing_Sample_ID)) {
query <- J$Sequencing_Sample_ID[i]
# Find matches in df1$X that contain this query as a substring
matches <- Scores[grepl(query, Scores$Sequencing_Sample_ID), ]
# Store in list with query as name
match_list[[query]] <- matches
}
# Combine list of dataframes into one, with a new column for the matching query
match_df <- do.call(rbind, lapply(names(match_list), function(key) {
df <- match_list[[key]]
if (nrow(df) > 0) {
df$matched_query <- key  # Add a column for the J$X match
return(df)
} else {
NULL
}
}))
missing<-setdiff(J$Sequencing_Sample_ID,match_df$matched_query)
match_df<-match_df%>%
select(-c(Sequencing_Sample_ID))%>%
rename(Sequencing_Sample_ID=matched_query)%>%
select(-c(X.1))
write.csv(match_df,"/Users/alinaklineschoder/Desktop/ScoreMatching_Output.csv")
